{"version":3,"file":"chakra-color-picker.cjs.production.min.js","sources":["../src/colorPicker.tsx"],"sourcesContent":["import {\n  Button,\n  Popover,\n  PopoverArrow,\n  PopoverContent,\n  PopoverTrigger,\n  SimpleGrid,\n  useBoolean,\n  PlacementWithLogical,\n} from \"@chakra-ui/react\";\nimport React, { useState } from \"react\";\n\nconst defaultColors = [\n  \"gray.500\",\n  \"red.500\",\n  \"orange.500\",\n  \"yellow.500\",\n  \"green.500\",\n  \"teal.500\",\n  \"blue.500\",\n  \"cyan.500\",\n  \"purple.500\",\n  \"pink.500\",\n];\n\nexport const ColorPicker = ({\n  onChange,\n  colors,\n  defaultColor,\n  bg,\n  placement,\n  isDisabled,\n}: ColorPickerProps) => {\n  const [isOpen, setIsOpen] = useBoolean();\n  const colorPalette = colors || defaultColors;\n  const [selectedColor, setSelectedColor] = useState<string>(defaultColor || colorPalette[0]);\n\n  return (\n    <Popover\n      isOpen={isOpen && !isDisabled}\n      onClose={setIsOpen.toggle}\n      placement={placement}\n    >\n      <PopoverTrigger>\n        <Button\n          bg={selectedColor}\n          onClick={setIsOpen.toggle}\n          _hover={{ bg: selectedColor, transform: \"scale(1.05)\" }}\n          _active={{ bg: selectedColor }}\n          aria-label=\"color picker\"\n          isDisabled={isDisabled}\n        ></Button>\n      </PopoverTrigger>\n      <PopoverContent w=\"auto\" bg={bg} boxShadow=\"md\">\n        <PopoverArrow />\n        <SimpleGrid columns={5} p={1} spacing={1}>\n          {colorPalette.map((color, index) => (\n            <Button\n              key={`color-picker-${color}-${index}`}\n              h=\"40px\"\n              w=\"40px\"\n              p={0}\n              minW=\"40px\"\n              bg={color}\n              _hover={{ bg: color, transform: \"scale(1.05)\" }}\n              _active={{ bg: color }}\n              onClick={() => {\n                setIsOpen.toggle();\n                setSelectedColor(color);\n                onChange(color);\n              }}\n            />\n          ))}\n        </SimpleGrid>\n      </PopoverContent>\n    </Popover>\n  );\n};\n\ninterface ColorPickerProps {\n  onChange: (value: string) => void;\n  colors?: string[];\n  defaultColor?: string;\n  bg?: string;\n  placement?: PlacementWithLogical;\n  isDisabled?: boolean;\n}\n"],"names":["defaultColors","onChange","colors","defaultColor","bg","placement","isDisabled","useBoolean","isOpen","setIsOpen","colorPalette","useState","selectedColor","setSelectedColor","React","Popover","onClose","toggle","PopoverTrigger","Button","onClick","_hover","transform","_active","PopoverContent","w","boxShadow","PopoverArrow","SimpleGrid","columns","p","spacing","map","color","index","key","h","minW"],"mappings":"kLAYMA,EAAgB,CACpB,WACA,UACA,aACA,aACA,YACA,WACA,WACA,WACA,aACA,gCAGyB,gBACzBC,IAAAA,SACAC,IAAAA,OACAC,IAAAA,aACAC,IAAAA,GACAC,IAAAA,UACAC,IAAAA,aAE4BC,eAArBC,OAAQC,OACTC,EAAeR,GAAUF,IACWW,WAAiBR,GAAgBO,EAAa,IAAjFE,OAAeC,cAGpBC,gBAACC,WACCP,OAAQA,IAAWF,EACnBU,QAASP,EAAUQ,OACnBZ,UAAWA,GAEXS,gBAACI,sBACCJ,gBAACK,UACCf,GAAIQ,EACJQ,QAASX,EAAUQ,OACnBI,OAAQ,CAAEjB,GAAIQ,EAAeU,UAAW,eACxCC,QAAS,CAAEnB,GAAIQ,gBACJ,eACXN,WAAYA,KAGhBQ,gBAACU,kBAAeC,EAAE,OAAOrB,GAAIA,EAAIsB,UAAU,MACzCZ,gBAACa,qBACDb,gBAACc,cAAWC,QAAS,EAAGC,EAAG,EAAGC,QAAS,GACpCrB,EAAasB,KAAI,SAACC,EAAOC,UACxBpB,gBAACK,UACCgB,oBAAqBF,MAASC,EAC9BE,EAAE,OACFX,EAAE,OACFK,EAAG,EACHO,KAAK,OACLjC,GAAI6B,EACJZ,OAAQ,CAAEjB,GAAI6B,EAAOX,UAAW,eAChCC,QAAS,CAAEnB,GAAI6B,GACfb,QAAS,WACPX,EAAUQ,SACVJ,EAAiBoB,GACjBhC,EAASgC"}